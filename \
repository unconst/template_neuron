import argparse
import bittensor_proto.bittensor_pb2_grpc as bittensor_grpc
import bittensor_proto.bittensor_pb2 as bittensor_pb2
from Crypto.Hash import SHA256
from concurrent import futures
from datetime import timedelta
from metagraph import Metagraph
from neuron import Neuron
from nucleus import Nucleus
from synapse import Synapse
from dendrite import Dendrite
from loguru import logger
import pickle
import random
import time
import numpy
import grpc
from timeloop import Timeloop

def set_timed_loops(tl, hparams, neuron, metagraph):

    # Pull the updated graph state (Vertices, Edges, Weights)
    @tl.job(interval=timedelta(seconds=5))
    def pull_metagraph():
        metagraph.pull_metagraph()

    # Reselect channels.
    @tl.job(interval=timedelta(seconds=2))
    def connect():
        neuron.connect()

    # Reselect channels.
    @tl.job(interval=timedelta(seconds=1))
    def query():
        neuron.query()

def main(hparams): 
    metagraph = Metagraph(hparams)
    modelfn = ModelFn(hparams)
    nucleus = Nucleus(hparams, modelfn)
    dendrite = Dendrite(hparams, metagraph)
    neuron = Neuron(hparams, nucleus, dendrite)
    synapse = Synapse(hparams, neuron, metagraph)

    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    bittensor_grpc.add_BittensorServicer_to_server(synapse, server)
    server.add_insecure_port(hparams.bind_address + ":" + hparams.port)
    server.start()

    neuron.start_training()

    tl = Timeloop()
    set_timed_loops(tl, hparams, neuron, metagraph)
    tl.start(block=False)
    logger.info('Started Timers.')

    try:
        logger.info('Begin wait on main...')
        while True:
            logger.debug('heartbeat')
            time.sleep(100)

    except KeyboardInterrupt:
        logger.debug('Neuron stopped with keyboard interrupt.')
        server.stop()
        del neuron
        del metagraph
        del synapse

    except Exception as e:
        logger.error('Neuron stopped with interrupt on error: ' + str(e))
        server.stop()
        del neuron
        del metagraph

if __name__ == '__main__':
    logger.debug("started neuron.")
    parser = argparse.ArgumentParser()

    # Server parameters.
    parser.add_argument(
        '--identity',
        default='abcd',
        type=str,
        help="network identity. Default identity=abcd")
    parser.add_argument(
        '--serve_address',
        default='0.0.0.0',
        type=str,
        help="Address to server neuron. Default serve_address=0.0.0.0")
    parser.add_argument(
        '--bind_address',
        default='0.0.0.0',
        type=str,
        help="Address to bind neuron. Default bind_address=0.0.0.0")
    parser.add_argument(
        '--port',
        default='9090',
        type=str,
        help="Port to serve neuron on. Default port=9090")
    parser.add_argument(
        '--eosurl',
        default='http://0.0.0.0:8888',
        type=str,
        help="Address to eos chain. Default eosurl=http://0.0.0.0:8888")
    parser.add_argument(
        '--logdir',
        default="/tmp/",
        type=str,
        help="logging output directory. Default logdir=/tmp/")
    parser.add_argument(
        '--n_embedding',
        default=128,
        type=int,
        help='Size of embedding between components. Default n_embedding=128')

    hparams = parser.parse_args()

    main(hparams)
